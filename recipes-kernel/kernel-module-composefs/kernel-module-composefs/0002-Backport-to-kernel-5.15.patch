From 2311dbd2fc1550ec1226f161bf8c13a3b00594c6 Mon Sep 17 00:00:00 2001
From: Sergio Prado <sergio.prado@toradex.com>
Date: Tue, 4 Apr 2023 23:36:16 +0000
Subject: [PATCH] Backport to kernel 5.15

Signed-off-by: Sergio Prado <sergio.prado@toradex.com>
---
 cfs-reader.c | 18 +++++++++++++-----
 cfs.c        | 10 ++++++----
 2 files changed, 19 insertions(+), 9 deletions(-)

diff --git a/cfs-reader.c b/cfs-reader.c
index 1c9cf2e7c96c..d0b0ea6f7bbe 100644
--- a/cfs-reader.c
+++ b/cfs-reader.c
@@ -59,12 +59,15 @@ struct cfs_buf {
 
 static void cfs_buf_put(struct cfs_buf *buf)
 {
+	size_t i;
+
 	if (buf->pages) {
+
 		if (buf->n_pages == 1)
 			kunmap_local(buf->base);
 		else
 			vm_unmap_ram(buf->base, buf->n_pages);
-		for (size_t i = 0; i < buf->n_pages; i++)
+		for (i = 0; i < buf->n_pages; i++)
 			put_page(buf->pages[i]);
 		if (buf->n_pages > CFS_BUF_PREALLOC_SIZE)
 			kfree(buf->pages);
@@ -82,6 +85,7 @@ static void *cfs_get_buf(struct cfs_context *ctx, u64 offset, u32 size,
 	u64 index, last_index;
 	struct page **pages;
 	void *base;
+	size_t i;
 
 	if (buf->pages)
 		return ERR_PTR(-EINVAL);
@@ -128,7 +132,7 @@ static void *cfs_get_buf(struct cfs_context *ctx, u64 offset, u32 size,
 	return base + (offset & (PAGE_SIZE - 1));
 
 nomem:
-	for (size_t i = 0; i < read_pages; i++)
+	for (i = 0; i < read_pages; i++)
 		put_page(pages[i]);
 	if (n_pages > CFS_BUF_PREALLOC_SIZE)
 		kfree(pages);
@@ -447,6 +451,7 @@ ssize_t cfs_list_xattrs(struct cfs_context *ctx,
 	size_t n_xattrs = 0;
 	u8 *data, *data_end;
 	ssize_t copied = 0;
+	size_t i;
 
 	if (inode_data->xattrs_len == 0)
 		return 0;
@@ -468,7 +473,7 @@ ssize_t cfs_list_xattrs(struct cfs_context *ctx,
 	data = ((u8 *)xattrs) + cfs_xattr_header_size(n_xattrs);
 	data_end = ((u8 *)xattrs) + inode_data->xattrs_len;
 
-	for (size_t i = 0; i < n_xattrs; i++) {
+	for (i = 0; i < n_xattrs; i++) {
 		const struct cfs_xattr_element *e = &xattrs->attr[i];
 		u16 this_value_len = le16_to_cpu(e->value_length);
 		u16 this_key_len = le16_to_cpu(e->key_length);
@@ -512,6 +517,7 @@ int cfs_get_xattr(struct cfs_context *ctx, struct cfs_inode_extra_data *inode_da
 	size_t n_xattrs = 0;
 	u8 *data, *data_end;
 	int res;
+	size_t i;
 
 	if (inode_data->xattrs_len == 0)
 		return -ENODATA;
@@ -533,7 +539,7 @@ int cfs_get_xattr(struct cfs_context *ctx, struct cfs_inode_extra_data *inode_da
 	data = ((u8 *)xattrs) + cfs_xattr_header_size(n_xattrs);
 	data_end = ((u8 *)xattrs) + inode_data->xattrs_len;
 
-	for (size_t i = 0; i < n_xattrs; i++) {
+	for (i = 0; i < n_xattrs; i++) {
 		const struct cfs_xattr_element *e = &xattrs->attr[i];
 		u16 this_value_len = le16_to_cpu(e->value_length);
 		u16 this_key_len = le16_to_cpu(e->key_length);
@@ -596,6 +602,7 @@ int cfs_dir_iterate(struct cfs_context *ctx, u64 index,
 	char *namedata, *namedata_end;
 	loff_t pos;
 	int res;
+	size_t i;
 
 	if (inode_data->dirents_len == 0)
 		return 0;
@@ -620,7 +627,8 @@ int cfs_dir_iterate(struct cfs_context *ctx, u64 index,
 	namedata = ((u8 *)dir) + cfs_dir_header_size(n_dirents);
 	namedata_end = ((u8 *)dir) + inode_data->dirents_len;
 	pos = 0;
-	for (size_t i = 0; i < n_dirents; i++) {
+
+	for (i = 0; i < n_dirents; i++) {
 		const struct cfs_dirent *dirent = &dir->dirents[i];
 		char *dirent_name =
 			(char *)namedata + le32_to_cpu(dirent->name_offset);
diff --git a/cfs.c b/cfs.c
index ca7b13fe2d48..d8a1887dec0f 100644
--- a/cfs.c
+++ b/cfs.c
@@ -250,7 +250,7 @@ static struct kmem_cache *cfs_inode_cachep;
 
 static struct inode *cfs_alloc_inode(struct super_block *sb)
 {
-	struct cfs_inode *cino = alloc_inode_sb(sb, cfs_inode_cachep, GFP_KERNEL);
+	struct cfs_inode *cino = kmem_cache_alloc(cfs_inode_cachep, GFP_KERNEL);
 
 	if (!cino)
 		return NULL;
@@ -394,6 +394,7 @@ static int cfs_fill_super(struct super_block *sb, struct fs_context *fc)
 	struct inode *inode;
 	struct vfsmount *mnt;
 	int ret;
+	size_t i;
 
 	/* Set up the inode allocator early */
 	sb->s_op = &cfs_ops;
@@ -428,7 +429,7 @@ static int cfs_fill_super(struct super_block *sb, struct fs_context *fc)
 		}
 
 		lower = splitlower;
-		for (size_t i = 0; i < numbasedirs; i++) {
+		for (i = 0; i < numbasedirs; i++) {
 			mnt = resolve_basedir(lower);
 			if (IS_ERR(mnt)) {
 				ret = PTR_ERR(mnt);
@@ -468,7 +469,7 @@ static int cfs_fill_super(struct super_block *sb, struct fs_context *fc)
 	return 0;
 fail:
 	if (bases) {
-		for (size_t i = 0; i < numbasedirs; i++) {
+		for (i = 0; i < numbasedirs; i++) {
 			if (bases[i])
 				kern_unmount(bases[i]);
 		}
@@ -494,8 +495,9 @@ static struct file *open_base_file(struct cfs_info *fsi, struct inode *inode,
 	struct cfs_inode *cino = CFS_I(inode);
 	struct file *real_file;
 	char *real_path = cino->inode_data.path_payload;
+	size_t i;
 
-	for (size_t i = 0; i < fsi->n_bases; i++) {
+	for (i = 0; i < fsi->n_bases; i++) {
 		real_file = file_open_root_mnt(fsi->bases[i], real_path,
 					       file->f_flags, 0);
 		if (real_file != ERR_PTR(-ENOENT))
-- 
2.34.1

